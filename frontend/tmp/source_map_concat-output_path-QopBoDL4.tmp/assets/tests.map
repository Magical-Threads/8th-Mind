{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/app.lint-test.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/ember-simple-auth.js","frontend/tests/helpers/flash-message.js","frontend/tests/helpers/module-for-acceptance.js","frontend/tests/helpers/resolver.js","frontend/tests/helpers/start-app.js","frontend/tests/helpers/validate-properties.js","frontend/tests/integration/components/article-aside-test.js","frontend/tests/integration/components/article-author-content-test.js","frontend/tests/integration/components/article-challenges-test.js","frontend/tests/integration/components/article-comments-test.js","frontend/tests/integration/components/article-countdown-timer-test.js","frontend/tests/integration/components/article-main-content-test.js","frontend/tests/integration/components/article-meta-test.js","frontend/tests/integration/components/article-post-test.js","frontend/tests/integration/components/challenge-submission-test.js","frontend/tests/integration/components/challenge-submit-test.js","frontend/tests/integration/components/gallery-post-test.js","frontend/tests/integration/components/gallery-submission-test.js","frontend/tests/integration/components/isotope-grid-test.js","frontend/tests/test-helper.js","frontend/tests/tests.lint-test.js","frontend/tests/unit/adapters/article-test.js","frontend/tests/unit/serializers/article-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/article.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/article.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/submission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/submission.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authorizers/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-aside.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-aside.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-author-content.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-author-content.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-challenges.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-challenges.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-comments.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-comments.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-countdown-timer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-countdown-timer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-meta.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-meta.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-post.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/challenge-submission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/challenge-submission.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/challenge-submit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/challenge-submit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/isotope-grid.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/isotope-grid.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/light-box.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/light-box.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/activate.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/activate.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/article.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/article.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/articles.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/articles.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/challenges.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/challenges.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/change-password.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/change-password.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/forget-password.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/forget-password.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/gallery.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/gallery.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/privacy.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/privacy.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/reset-password-process.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/reset-password-process.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/category-href.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/category-href.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/category-tag-class.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/category-tag-class.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/category-tag.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/category-tag.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/category-view-all-text.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/category-view-all-text.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/change-author-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/change-author-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/ember-cli-lightbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/ember-cli-lightbox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/get-post-row-class.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-post-row-class.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/is-a-challenge.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-a-challenge.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/short-desc.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/short-desc.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/article.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/article.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/asset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/asset.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/submission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/submission.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/activate.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/activate.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/article.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/article.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/article/gallery.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/article/gallery.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/articles.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/articles.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/challenges.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/challenges.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/change-password.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/change-password.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/forget-password.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/forget-password.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/gallery.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gallery.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/privacy.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/privacy.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/reset-password-process.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/reset-password-process.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('scripts/gallery-controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'scripts/gallery-controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('scripts/gsap.SplitText.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'scripts/gsap.SplitText.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/article.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/article.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/asset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/asset.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/submission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/submission.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('frontend/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('frontend/tests/helpers/flash-message', ['ember-cli-flash/flash/object'], function (_object) {\n  'use strict';\n\n  _object.default.reopen({\n    init: function init() {}\n  });\n});","define('frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'frontend/tests/helpers/start-app', 'frontend/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('frontend/tests/helpers/resolver', ['exports', 'frontend/resolver', 'frontend/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('frontend/tests/helpers/start-app', ['exports', 'frontend/app', 'frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('frontend/tests/helpers/validate-properties', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n\n  var run = Ember.run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('frontend/tests/integration/components/article-aside-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-aside', 'Integration | Component | article aside', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KPt1XGdQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-aside\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5ty5iy1f\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-aside\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-author-content-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-author-content', 'Integration | Component | article author content', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DPjn04DX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-author-content\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"OuVUeqZg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-author-content\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-challenges-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-challenges', 'Integration | Component | article challenges', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ngTUpPqB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-challenges\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XBC+eioN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-challenges\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-comments-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-comments', 'Integration | Component | article comments', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4hyBSbdF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-comments\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"F9OZevcQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-comments\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-countdown-timer-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-countdown-timer', 'Integration | Component | article countdown timer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"X1HaH5+l\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-countdown-timer\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kk7MaKUM\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-countdown-timer\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-main-content-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-main-content', 'Integration | Component | article main content', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iWuo4kVX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-main-content\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"k8YMR7dg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-main-content\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-meta-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-meta', 'Integration | Component | article meta', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mgr8na8j\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-meta\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"OzDrUv5t\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-meta\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/article-post-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-post', 'Integration | Component | article post', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Gjd79IeG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-post\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"esugSahS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-post\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/challenge-submission-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('challenge-submission', 'Integration | Component | challenge submission', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"fN1XOIbY\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"challenge-submission\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"eCvpZs3y\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"challenge-submission\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/challenge-submit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('challenge-submit', 'Integration | Component | challenge submit', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+mtBE8IL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"challenge-submit\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"f9wQnjD4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"challenge-submit\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/gallery-post-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('gallery-post', 'Integration | Component | gallery post', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0RAU9scv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"gallery-post\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"vljSMNaj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gallery-post\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/gallery-submission-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('gallery-submission', 'Integration | Component | gallery submission', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"pvg2CnpK\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"gallery-submission\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"7R2j2ojL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gallery-submission\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/isotope-grid-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('isotope-grid', 'Integration | Component | isotope grid', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JRfvtzA/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"isotope-grid\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"/zfM6TW0\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"isotope-grid\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/test-helper', ['frontend/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit', 'frontend/tests/helpers/flash-message'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/flash-message.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/flash-message.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-aside-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-aside-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-author-content-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-author-content-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-challenges-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-challenges-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-comments-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-comments-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-countdown-timer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-countdown-timer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-main-content-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-main-content-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-meta-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-meta-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-post-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-post-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/challenge-submission-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/challenge-submission-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/challenge-submit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/challenge-submit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/gallery-post-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/gallery-post-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/gallery-submission-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/gallery-submission-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/isotope-grid-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/isotope-grid-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/article-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/article-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/article-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/article-test.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/unit/adapters/article-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:article', 'Unit | Adapter | article', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('frontend/tests/unit/serializers/article-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('article', 'Unit | Serializer | article', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:article']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsvCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtfA;AACA;","file":"tests.js"}